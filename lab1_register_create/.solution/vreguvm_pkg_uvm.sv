//----------------------------------------------------------------------
//   THIS IS AUTOMATICALLY GENERATED CODE
//   Generated by Mentor Graphics' Register Assistant UVM V2019.4 (Build 1)
//   UVM Register Kit version 1.1
//----------------------------------------------------------------------
// Project         : .solution
// Unit            : vreguvm_pkg_uvm
// File            : vreguvm_pkg_uvm.sv
//----------------------------------------------------------------------
// Created by      : aedemo
// Creation Date   : 11/21/19 2:26 PM
//----------------------------------------------------------------------
// Title           : .solution
//
// Description     : 
//
//----------------------------------------------------------------------

//----------------------------------------------------------------------
// vreguvm_pkg_uvm
//----------------------------------------------------------------------
package vreguvm_pkg_uvm;

   import uvm_pkg::*;

   `include "uvm_macros.svh"

   /* DEFINE REGISTER CLASSES */



   //--------------------------------------------------------------------
   // Class: csr
   // 
   // Command Status Reg
   //--------------------------------------------------------------------

   class csr extends uvm_reg;
      `uvm_object_utils(csr)

      uvm_reg_field rsvd; // Reserved
      uvm_reg_field error; // Transfer error
      uvm_reg_field done; // Transfer done
      uvm_reg_field busy; // Device busy
      rand uvm_reg_field go; // Start transfer


      // Function: coverage
      // 
      covergroup cg_vals;
         error	 : coverpoint error.value[0];
         done	 : coverpoint done.value[0];
         busy	 : coverpoint busy.value[0];
         go	 : coverpoint go.value[0];
      endgroup



      // Function: new
      // 
      function new(string name = "csr");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         rsvd = uvm_reg_field::type_id::create("rsvd");
         error = uvm_reg_field::type_id::create("error");
         done = uvm_reg_field::type_id::create("done");
         busy = uvm_reg_field::type_id::create("busy");
         go = uvm_reg_field::type_id::create("go");

         rsvd.configure(this, 12, 4, "RO", 1, 12'h000, 1, 0, 0);
         error.configure(this, 1, 3, "RC", 1, 1'b0, 1, 0, 0);
         done.configure(this, 1, 2, "RO", 1, 1'b0, 1, 0, 0);
         busy.configure(this, 1, 1, "RO", 1, 1'b0, 1, 0, 0);
         go.configure(this, 1, 0, "WO", 1, 1'b0, 1, 1, 0);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: dst
   // 
   // Destination Address
   //--------------------------------------------------------------------

   class dst extends uvm_reg;
      `uvm_object_utils(dst)

      rand uvm_reg_field F; 


      // Function: coverage
      // 
      covergroup cg_vals;
         F	 : coverpoint F.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "dst");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");

         F.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: mem
   // 
   // System memory
   //--------------------------------------------------------------------

   class mem extends uvm_mem;
      `uvm_object_utils(mem)



      // Function: new
      // 
      function new(string name = "mem");
         super.new(name, 'h4000, 16, "RW", UVM_NO_COVERAGE);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: size
   // 
   // Transfer Size
   //--------------------------------------------------------------------

   class size extends uvm_reg;
      `uvm_object_utils(size)

      rand uvm_reg_field F; 


      // Function: coverage
      // 
      covergroup cg_vals;
         F	 : coverpoint F.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "size");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");

         F.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: src
   // 
   // Source Address
   //--------------------------------------------------------------------

   class src extends uvm_reg;
      `uvm_object_utils(src)

      rand uvm_reg_field F; 


      // Function: coverage
      // 
      covergroup cg_vals;
         F	 : coverpoint F.value[15:0];
      endgroup



      // Function: new
      // 
      function new(string name = "src");
         super.new(name, 16, build_coverage(UVM_CVR_FIELD_VALS));
         add_coverage(build_coverage(UVM_CVR_FIELD_VALS));
         if(has_coverage(UVM_CVR_FIELD_VALS))
            cg_vals = new();
      endfunction


      // Function: sample_values
      // 
      virtual function void sample_values();
         super.sample_values();
         if (get_coverage(UVM_CVR_FIELD_VALS))
            cg_vals.sample();
      endfunction


      // Function: build
      // 
      virtual function void build();
         F = uvm_reg_field::type_id::create("F");

         F.configure(this, 16, 0, "RW", 0, 16'h0000, 1, 1, 1);
      endfunction
   endclass




   /* BLOCKS */



   //--------------------------------------------------------------------
   // Class: dma_block
   // 
   //--------------------------------------------------------------------

   class dma_block extends uvm_reg_block;
      `uvm_object_utils(dma_block)

      rand csr csr0; // Command Status Reg
      rand size size0; // Transfer Size
      rand src src0; // Source Address
      rand dst dst0; // Destination Address

      uvm_reg_map dma_map; // DMA block map


      // Function: new
      // 
      function new(string name = "dma_block");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         csr0 = csr::type_id::create("csr0");
         csr0.configure(this, null, "csr0");
         csr0.build();

         size0 = size::type_id::create("size0");
         size0.configure(this, null, "size0");
         size0.build();

         src0 = src::type_id::create("src0");
         src0.configure(this, null, "src0");
         src0.build();

         dst0 = dst::type_id::create("dst0");
         dst0.configure(this, null, "dst0");
         dst0.build();

         dma_map = create_map("dma_map", 'h0, 2, UVM_LITTLE_ENDIAN, 1);
         default_map = dma_map;

         dma_map.add_reg(csr0, 'h0, "RW");
         dma_map.add_reg(size0, 'h2, "RW");
         dma_map.add_reg(src0, 'h6, "RW");
         dma_map.add_reg(dst0, 'h4, "RW");

         lock_model();
      endfunction
   endclass



   //--------------------------------------------------------------------
   // Class: top_block
   // 
   //--------------------------------------------------------------------

   class top_block extends uvm_reg_block;
      `uvm_object_utils(top_block)

      rand dma_block dma_rm; // DMA register model
      mem mem0; // System memory

      uvm_reg_map top_map; // Top map


      // Function: new
      // 
      function new(string name = "top_block");
         super.new(name, build_coverage(UVM_CVR_ALL));
      endfunction


      // Function: build
      // 
      virtual function void build();
         dma_rm = dma_block::type_id::create("dma_rm");
         dma_rm.configure(this, "dma0");
         dma_rm.build();

         mem0 = mem::type_id::create("mem0");
         mem0.configure(this, "dma0.mem0");

         top_map = create_map("top_map", 'h0, 2, UVM_LITTLE_ENDIAN, 1);
         default_map = top_map;

         top_map.add_submap(dma_rm.dma_map, 'h8000);
         top_map.add_mem(mem0, 'h0, "RW");

         lock_model();
      endfunction
   endclass


endpackage
